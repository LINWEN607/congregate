stages:
  - build
  - test
  - release
  - deploy

include:
  - template: SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

variables:
  DOCKER_VERSION: "19.03.1"
  TEST_IMAGE_NAME: "$CI_REGISTRY_IMAGE/test-3.8:latest"
  BB_SERVER_SEED_IMAGE_NAME: "$CI_REGISTRY_IMAGE/bitbucket-seed:latest"
  SAST_DISABLE_DIND: "true"
  SAST_DEFAULT_ANALYZERS: "bandit,secrets"

default:
  image: "$TEST_IMAGE_NAME"
  tags:
    - gitlab-org

workflow:
  rules:
    # For merge requests, create a pipeline.
    - if: "$CI_MERGE_REQUEST_IID"
    # For `master` branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    # For tags, create a pipeline.
    - if: "$CI_COMMIT_TAG"

.use-docker-in-docker:
  image: docker:${DOCKER_VERSION}
  services:
    - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  tags:
    # See https://gitlab.com/gitlab-com/www-gitlab-com/-/issues/7019 for tag descriptions
    - gitlab-org-docker

.docker-login:
  before_script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p $CI_BUILD_TOKEN

.gitlab-destination:
  services:
    - name: gitlab/gitlab-ee:13.1.4-ee.0
      alias: gitlab_destination
      command:
        [
          "sh",
          "-c",
          "python3 -m http.server 443 --directory /var/log/gitlab/gitlab-rails/ & :; /assets/wrapper",
        ]

.e2e-cleanup:
  after_script:
    - curl -O http://gitlab_destination:443/api_json.log
    - curl -O http://gitlab_destination:443/importer.log
    - curl -O http://gitlab_destination:443/exceptions_json.log
    - poetry run aws ec2 terminate-instances --instance-ids $(cat instance_id)
  artifacts:
    when: always
    paths:
      - data/*.html
      - data/*diff*.json
      - data/*results.json
      - data/audit*.log
      - api_json.log
      - importer.log
      - exceptions_json.log

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

sast:
  artifacts:
    paths: [gl-sast-report.json]

build:
  extends:
    - .use-docker-in-docker
    - .docker-login
  stage: build
  script:
    - /bin/sh build_test_image.sh
  rules:
    - changes:
        - .gitlab-ci.yml
        - docker/test/*

build bitbucket seed image:
  extends:
    - .use-docker-in-docker
    - .docker-login
  stage: build
  script:
    - cp docker/bitbucket/Dockerfile ./
    - docker build -t $BB_SERVER_SEED_IMAGE_NAME . --build-arg BITBUCKET_LICENSE=$BITBUCKET_LICENSE --build-arg BITBUCKET_PASSWORD=$BITBUCKET_PASSWORD
    - docker push "$BB_SERVER_SEED_IMAGE_NAME"
  rules:
    - changes:
        - .gitlab-ci.yml
        - docker/bitbucket/Dockerfile
        - docker/bitbucket/entrypoint.py
        - docker/bitbucket/seed_data.sh

.test-job:
  stage: test
  before_script:
    - pip install poetry
    - poetry install
    - ./congregate.sh init
  rules:
    - changes:
        - congregate/**/*
        - docker/test/*
        - congregate.sh
        - pyproject.toml
        - poetry.lock
        - spin_up_test_vm.sh

test:pylint:
  extends: .test-job
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  script:
    - ./pylint.sh
  artifacts:
    paths:
      - pylint.txt

test:unit:
  extends: .test-job
  script:
    - poetry run pytest -m 'not e2e and not e2e_setup and not e2e_setup_2' --cov-report html --cov-config=.coveragerc --cov=congregate congregate/tests/
  artifacts:
    paths:
      - htmlcov/*

test:end-to-end full:
  extends:
    - .test-job
    - .use-docker-in-docker
    - .gitlab-destination
    - .e2e-cleanup
  image: "${TEST_IMAGE_NAME}"
  tags:
    - congregate-auto-scale-runner
  script:
    - ./spin_up_test_vm.sh
    - export GITLAB_SRC=http://$(cat source_ip)
    - export GITLAB_SRC_REG_URL=$(cat source_ip):4567
    - export GITLAB_DEST=http://gitlab_destination
    - export GITLAB_DEST_REG_URL=gitlab_destination:4567
    - poetry run pytest -s -m e2e_setup congregate/tests/
    - poetry run pytest -s -m e2e --cov-config=.coveragerc --cov=congregate congregate/tests/

test:end-to-end single group:
  extends:
    - .test-job
    - .use-docker-in-docker
    - .gitlab-destination
    - .e2e-cleanup
  image: "${TEST_IMAGE_NAME}"
  tags:
    - congregate-auto-scale-runner
  script:
    - ./spin_up_test_vm.sh
    - export GITLAB_SRC=http://$(cat source_ip)
    - export GITLAB_SRC_REG_URL=$(cat source_ip):4567
    - export GITLAB_DEST=http://gitlab_destination
    - export GITLAB_DEST_REG_URL=gitlab_destination:4567
    - poetry run pytest -s -m e2e_setup_2 congregate/tests/
    - poetry run pytest -s -m e2e --cov-config=.coveragerc --cov=congregate congregate/tests/

test:GitHub Server end to end:
  extends:
    - .test-job
  image: "${TEST_IMAGE_NAME}"  
  tags:
    - congregate-auto-scale-runner
  script:
    - curl -k $GH_TEST_INSTANCE_URL -v
  rules:
    - changes:
      - .gitlab-ci.yml
      
rolling release:
  extends:
    - .use-docker-in-docker
    - .docker-login
  stage: release
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  variables:
    RELEASE_IMAGE_NAME: "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA"
    LATEST: "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest"
  script:
    - cp docker/release/Dockerfile ./
    - docker build --tag "$RELEASE_IMAGE_NAME" .
    - docker image tag $RELEASE_IMAGE_NAME $LATEST
    - docker push "$RELEASE_IMAGE_NAME"
    - docker push "$LATEST"

release-tag:
  extends:
    - .use-docker-in-docker
    - .docker-login
  rules:
    - if: "$CI_COMMIT_TAG"
  stage: release
  variables:
    RELEASE_IMAGE_NAME: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    LATEST: "$CI_REGISTRY_IMAGE:latest"
  script:
    - cp docker/release/Dockerfile ./
    - docker build --tag "$RELEASE_IMAGE_NAME" .
    - docker image tag $RELEASE_IMAGE_NAME $LATEST
    - docker push "$RELEASE_IMAGE_NAME"
    - docker push "$LATEST"

runbook update:
  stage: test
  script:
    - echo "This is a placeholder job ran only when runbooks are changed"
    - echo "Storing any changed runbook to artifacts that will expire in 1 week."
  rules:
    - changes:
        - runbooks/*
  artifacts:
    paths:
      - runbooks/*
    expire_in: 1 week

pages:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - changes:
        - runbooks/*
        - congregate/docs/**/*
        - ./**/*.md
  # dependencies:
  #   - code_quality
  script:
    - mkdir -p data
    - poetry install
    # - mv gl-code-quality-report.json congregate/docs/source/_static/
    - poetry run sphinx-apidoc -f -o congregate/docs/source/ ./
    - cd congregate/docs
    - make html
    - mv build/html ../../public
  artifacts:
    paths:
      - public
