include:
  - template: SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

variables:
  DOCKER_DRIVER: overlay2
  BUILD_IMAGE_NAME: "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
  SAST_DISABLE_DIND: "true"
  SAST_DEFAULT_ANALYZERS: "bandit,secrets"

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

sast:
  artifacts:
    paths: [gl-sast-report.json]

stages:
  - build
  - test
  - cleanup
  - release
  - deploy

build:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: build
  script:
    - docker login ${CI_REGISTRY} -u ${GITLAB_USER_LOGIN} -p ${ACCESS_TOKEN}
    - docker build --tag "$BUILD_IMAGE_NAME" .
    - docker push "$BUILD_IMAGE_NAME"

# pre-test:
#   stage: pre-test
#   image: "$BUILD_IMAGE_NAME"
#   script:
#     - apt-get update
#     - pip install pipenv
#     - export PIPENV_VENV_IN_PROJECT=true
#     - pipenv install
#   cache:
#     paths:
#       - .venv/

.test-job: &test-job
  stage: test
  image: "$BUILD_IMAGE_NAME"
  before_script:
    - apt-get update
    - mkdir data
    - echo ${Dummy_config_new} > $CONGREGATE_PATH/data/congregate.conf
    - poetry install

test:pylint:
  <<: *test-job
  script:
    - ./pylint.sh
  only:
    - /^master$/
  artifacts:
    paths:
      - pylint.txt

test:unit:
  <<: *test-job
  script:
    - poetry run pytest -m 'not e2e and not e2e_setup' --cov-config=.coveragerc --cov=congregate congregate/tests/

test:end-to-end:
  services:
    - name: docker:19.03.1-dind
    - name: gitlab/gitlab-ee:latest
      alias: gitlab_source
    - name: gitlab/gitlab-ee:latest
      alias: gitlab_destination
  <<: *test-job
  tags:
    - e2e
  script:
    - ./spin_up_test_vm.sh
    - export GITLAB_SRC=http://$(cat source_ip)
    - export GITLAB_SRC_REG_URL=$(cat source_ip):4567
    - export GITLAB_DEST=http://gitlab_destination
    - export GITLAB_DEST_REG_URL=gitlab_destination:4567
    - poetry run pytest -s -m e2e_setup congregate/tests/
    - poetry run pytest -s -m e2e --cov-config=.coveragerc --cov=congregate congregate/tests/
  after_script:
    - congregate generate-diff
    - poetry run aws ec2 terminate-instances --instance-ids $(cat instance_id)
  artifacts:
    when: always
    paths:
      - data/*.html
  allow_failure: true

remove redundant docker images:
  stage: cleanup
  script:
    - docker images -a | grep "$CI_REGISTRY_IMAGE" | awk '{print $3}' | xargs docker rmi 2> /dev/null || true
    - docker images -a | grep -E 'gitlab/gitlab-ee.*<none>' | awk '{print $3}' | xargs docker rmi 2> /dev/null || true
  tags:
    - e2e-cleanup

release-tag:
  stage: release
  image: docker:stable
  variables:
    RELEASE_IMAGE_NAME: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
  services:
    - docker:19.03.1-dind
  before_script:
    - docker login -u "$GITLAB_USER_LOGIN" -p "$ACCESS_TOKEN" "$CI_REGISTRY"
  script:
    - docker pull "$BUILD_IMAGE_NAME"
    - docker tag "$BUILD_IMAGE_NAME" "$RELEASE_IMAGE_NAME"
    - docker push "$RELEASE_IMAGE_NAME"
  only:
    - tags

pages:
  stage: deploy
  dependencies:
    - code_quality
  script:
    - mv gl-code-quality-report.json public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master
