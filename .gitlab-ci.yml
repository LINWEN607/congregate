include:
  - template: SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

variables:
  DOCKER_DRIVER: overlay2
  TEST_IMAGE_NAME: "$CI_REGISTRY_IMAGE/test:latest"
  SAST_DISABLE_DIND: "true"
  SAST_DEFAULT_ANALYZERS: "bandit,secrets"

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

sast:
  artifacts:
    paths: [gl-sast-report.json]

stages:
  - build
  - test
  - cleanup
  - release
  - deploy

build:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: build
  script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p $CI_BUILD_TOKEN
    - docker build --tag "$TEST_IMAGE_NAME" docker/test
    - docker push "$TEST_IMAGE_NAME"
  only:
    changes:
      - docker/test/Dockerfile

.test-job: &test-job
  stage: test
  image: "$TEST_IMAGE_NAME"
  before_script:
    - mkdir data
    - echo ${Dummy_config} > $CONGREGATE_PATH/data/congregate.conf
    - pip install poetry
    - poetry install

test:pylint:
  <<: *test-job
  script:
    - ./pylint.sh
  only:
    - /^master$/
  artifacts:
    paths:
      - pylint.txt

test:unit:
  <<: *test-job
  script:
    - poetry run pytest -m 'not e2e and not e2e_setup' --cov-config=.coveragerc --cov=congregate congregate/tests/

test:end-to-end:
  services:
    - name: docker:19.03.1-dind
    - name: gitlab/gitlab-ee:latest
      alias: gitlab_destination
  <<: *test-job
  tags:
    - e2e
  script:
    - ./spin_up_test_vm.sh
    - export GITLAB_SRC=http://$(cat source_ip)
    - export GITLAB_SRC_REG_URL=$(cat source_ip):4567
    - export GITLAB_DEST=http://gitlab_destination
    - export GITLAB_DEST_REG_URL=gitlab_destination:4567
    - poetry run pytest -s -m e2e_setup congregate/tests/
    - poetry run pytest -s -m e2e --cov-config=.coveragerc --cov=congregate congregate/tests/
  after_script:
    - poetry run aws ec2 terminate-instances --instance-ids $(cat instance_id)
  artifacts:
    when: always
    paths:
      - data/*.html
      - data/*diff*.json
      - data/*results.json
      - data/congregate.log

remove redundant docker images:
  stage: cleanup
  script:
    - docker images -a | grep "$CI_REGISTRY_IMAGE" | awk '{print $3}' | xargs docker rmi 2> /dev/null || true
    - docker images -a | grep -E 'gitlab/gitlab-ee.*<none>' | awk '{print $3}' | xargs docker rmi 2> /dev/null || true
  tags:
    - e2e-cleanup

release-tag:
  stage: release
  image: docker:stable
  variables:
    RELEASE_IMAGE_NAME: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
  services:
    - docker:19.03.1-dind
  before_script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p $CI_BUILD_TOKEN
  script:
    - docker build --tag "$RELEASE_IMAGE_NAME" docker/release
    - docker push "$RELEASE_IMAGE_NAME"
  only:
    - tags

pages:
  stage: deploy
  image: "$TEST_IMAGE_NAME"
  dependencies:
    - code_quality
  script:
    - mkdir data
    - echo ${Dummy_config} > $CONGREGATE_PATH/data/congregate.conf
    - poetry install
    - mv gl-code-quality-report.json congregate/docs/source/_static/
    - poetry run sphinx-apidoc -f -o congregate/docs/source/ ./
    - cd congregate/docs
    - make html
    - mv build/html ../../public
  artifacts:
    paths:
      - public
  only:
    - master
