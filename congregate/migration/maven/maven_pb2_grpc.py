# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

try:
    import maven_pb2 as maven__pb2
except ImportError:
    from congregate.migration.maven import maven_pb2 as maven__pb2


class MavenCommandHandlerStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPackage = channel.unary_unary(
                '/MavenCommandHandler/GetPackage',
                request_serializer=maven__pb2.GetPackageArgs.SerializeToString,
                response_deserializer=maven__pb2.Response.FromString,
                )
        self.DeployPackage = channel.unary_unary(
                '/MavenCommandHandler/DeployPackage',
                request_serializer=maven__pb2.DeployPackageArgs.SerializeToString,
                response_deserializer=maven__pb2.Response.FromString,
                )


class MavenCommandHandlerServicer(object):
    """Interface exported by the server.
    """

    def GetPackage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeployPackage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MavenCommandHandlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPackage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPackage,
                    request_deserializer=maven__pb2.GetPackageArgs.FromString,
                    response_serializer=maven__pb2.Response.SerializeToString,
            ),
            'DeployPackage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployPackage,
                    request_deserializer=maven__pb2.DeployPackageArgs.FromString,
                    response_serializer=maven__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MavenCommandHandler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MavenCommandHandler(object):
    """Interface exported by the server.
    """

    @staticmethod
    def GetPackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MavenCommandHandler/GetPackage',
            maven__pb2.GetPackageArgs.SerializeToString,
            maven__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeployPackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MavenCommandHandler/DeployPackage',
            maven__pb2.DeployPackageArgs.SerializeToString,
            maven__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
