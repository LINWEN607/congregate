import unittest
from unittest.mock import Mock, patch, PropertyMock
from pytest import mark

from congregate.migration.ado.base import AzureDevOpsWrapper
from congregate.migration.ado.api.repositories import RepositoriesApi

from congregate.tests.mockapi.ado.projects import MockProjectsApi
from congregate.tests.mockapi.ado.groups import MockGroupsApi
from congregate.tests.mockapi.ado.repositories import MockRepositoriesApi
from congregate.tests.mockapi.ado.users import MockUsersApi

@mark.unit_test
class BaseTests(unittest.TestCase):

    def setUp(self):
        self.mock_projects = MockProjectsApi()
        self.mock_groups = MockGroupsApi()
        self.mock_repositories = MockRepositoriesApi()
        self.mock_users = MockUsersApi()
        self.api = AzureDevOpsWrapper()
        self.repositories_api = RepositoriesApi()
        self.api.slugify = Mock(side_effect=lambda x: x.lower().replace(' ', '-'))

    def test_slugify(self):
        self.assertEqual(self.api.slugify("Yet Another Repo"), "yet-another-repo")

    def test_format_project(self):
        
        # Test the formatting of project object based on project's mockAPI and repository's mockAPI

        project = self.mock_projects.get_single_project()
        repository = self.mock_repositories.get_single_repository()
        formatted_project = self.api.format_project(project, repository, 1, mongo=None)
        
        expected_formatted_project = {
            "name": "Azure Bicep Workshop",
            "id": "b2071745-4b0b-4cde-a177-9422f7cbd811",
            "path": "azure-bicep-workshop",
            "path_with_namespace": "azure-bicep-workshop",
            "visibility": "private",
            "description": "",
            "members": [],
            "http_url_to_repo": "https://gitlab-ps@dev.azure.com/gitlab-ps/Azure%20Bicep%20Workshop/_git/Azure%20Bicep%20Workshop",
            "ssh_url_to_repo": "git@ssh.dev.azure.com:v3/gitlab-ps/Azure%20Bicep%20Workshop/Azure%20Bicep%20Workshop",
            "namespace": {
                "full_path": "azure-bicep-workshop",
                "id": "20671faf-e1bd-4226-8172-0cdf0fdb7128",
                "kind": "group",
                "name": "Azure Bicep Workshop",
                "path": "azure-bicep-workshop"
            }
        }
        
        self.assertEqual(expected_formatted_project, formatted_project)

    @patch('congregate.migration.ado.api.repositories', new_callable=PropertyMock)
    def test_format_group(self, mock_get_all_repositories):

        group = self.mock_groups.get_single_group()
        mock_get_all_repositories.return_value = self.mock_repositories.get_all_repositories()
        self.api.add_project_repos = Mock(return_value=['8630e352-f5b2-4abc-a25c-00a931f0cda2', '9c766a24-385b-4931-afe4-245ad2e915aa'])
        formatted_group = self.api.format_group(group, mongo=None)

        expected_formatted_group = {
            "name": "MyShuttle",
            "id": "ac4f77cb-966f-49ae-b942-13471223719e",
            "path": "myshuttle",
            "full_path": "myshuttle",
            "visibility": "private",
            "description": "Generated by Azure DevOps Demo Generator",
            "members": [],
            "projects": [
                '8630e352-f5b2-4abc-a25c-00a931f0cda2',
                '9c766a24-385b-4931-afe4-245ad2e915aa'
            ]
        }
        self.assertEqual(sorted(expected_formatted_group['projects']), sorted(formatted_group['projects']))

    def test_format_user(self):

        users = self.mock_users.get_all_users()
        user = users["value"][0]
        formatted_user = self.api.format_user(user)
        expected_formatted_user = {
            "email": "gitlab-ps@outlook.com",
            "id": "aad.NzE0YzVlNTItMmU1OC03ODgwLWEzMGQtMmZiYjE2ODdjZTk1",
            "name": "GitLab PS",
            "username": "gitlab.ps"
        }
        self.assertEqual(expected_formatted_user, formatted_user)

    def test_create_valid_username_basic(self):
        users = self.mock_users.get_all_users()
        user_display_name = users["value"][1]["displayName"]
        expected_username = "john.v.doe"
        self.assertEqual(self.api.create_valid_username(user_display_name), expected_username)

    def test_create_valid_username_with_leading_trailing_dots(self):
        user = " ..john v doe.. "
        expected_username = "john.v.doe"
        self.assertEqual(self.api.create_valid_username(user), expected_username)
