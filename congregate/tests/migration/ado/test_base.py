import unittest
from unittest.mock import Mock, patch, PropertyMock
from pytest import mark

from congregate.migration.ado.base import AzureDevOpsWrapper
from congregate.migration.ado.api.repositories import RepositoriesApi

from congregate.tests.mockapi.ado.projects import MockProjectsApi
from congregate.tests.mockapi.ado.groups import MockGroupsApi
from congregate.tests.mockapi.ado.repositories import MockRepositoriesApi
from congregate.tests.mockapi.ado.users import MockUsersApi
from congregate.tests.mockapi.ado.teams import MockTeamsApi

@mark.unit_test
class BaseTests(unittest.TestCase):

    def setUp(self):
        self.mock_projects = MockProjectsApi()
        self.mock_groups = MockGroupsApi()
        self.mock_repositories = MockRepositoriesApi()
        self.mock_users = MockUsersApi()
        self.mock_teams = MockTeamsApi()
        self.api = AzureDevOpsWrapper()
        self.repositories_api = RepositoriesApi()
        self.api.slugify = Mock(side_effect=lambda x: x.lower().replace(' ', '-'))

    def test_slugify(self):
        self.assertEqual(self.api.slugify("Yet Another Repo"), "yet-another-repo")

    # Test the formatting of project object based on project's mockAPI and repository's mockAPI
    @patch('congregate.migration.ado.base.AzureDevOpsWrapper.add_team_members')
    def test_format_project(self, mock_add_team_members):

        mock_users = [
                {
                    "email": "gitlab-ps@outlook.com",
                    "id": "aad.NzE0YzVlNTItMmU1OC03ODgwLWEzMGQtMmZiYjE2ODdjZTk1",
                    "name": "GitLab PS",
                    "state": "active",
                    "username": "gitlab.ps"
                },
                {
                    "email": "john.doe@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.ZTlkMzM1NjgtZTZmMi03ZGVhLWI4ZmQtMzA4MzlmYjA2ODhm",
                    "name": "John Doe",
                    "state": "active",
                    "username": "john.doe"
                },
                {
                    "email": "paul.van.windmill@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.OTcwYTMwODktNTZjMC03ZmRiLWI1MDItYzIwZWVjM2Y1ZTM4",
                    "name": "Paul van Windmill",
                    "state": "active",
                    "username": "paul.van.windmill"
                },
                {
                    "email": "adam.bijman@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.NmEwOTg0ZWItYjI4Yy03YjVjLWJjZWItZTMwOTU3ZWQ2YTg4",
                    "name": "Adam Bijman",
                    "state": "active",
                    "username": "adam.bijman"
                }
            ]
        mock_add_team_members.return_value = mock_users
        project = self.mock_projects.get_single_project()
        repository = self.mock_repositories.get_single_repository()
        formatted_project = self.api.format_project(project, repository, 1, mongo=None)
        expected_formatted_project = {
            "description": "Generated by Azure DevOps Demo Generator",
            "http_url_to_repo": "https://dev.azure.com/gitlab-ps/eShopOnWeb/_git/eShopOnWeb",
            "id": "06b48f27-94eb-4229-abd8-ca6be39b4c48",
            "members": [
                {
                    "email": "gitlab-ps@outlook.com",
                    "id": "aad.NzE0YzVlNTItMmU1OC03ODgwLWEzMGQtMmZiYjE2ODdjZTk1",
                    "name": "GitLab PS",
                    "state": "active",
                    "username": "gitlab.ps"
                },
                {
                    "email": "john.doe@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.ZTlkMzM1NjgtZTZmMi03ZGVhLWI4ZmQtMzA4MzlmYjA2ODhm",
                    "name": "John Doe",
                    "state": "active",
                    "username": "john.doe"
                },
                {
                    "email": "paul.van.windmill@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.OTcwYTMwODktNTZjMC03ZmRiLWI1MDItYzIwZWVjM2Y1ZTM4",
                    "name": "Paul van Windmill",
                    "state": "active",
                    "username": "paul.van.windmill"
                },
                {
                    "email": "adam.bijman@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.NmEwOTg0ZWItYjI4Yy03YjVjLWJjZWItZTMwOTU3ZWQ2YTg4",
                    "name": "Adam Bijman",
                    "state": "active",
                    "username": "adam.bijman"
                }
            ],
            "name": "eShopOnWeb",
            "namespace": {
                "full_path": "eshoponweb",
                "id": "fab6c524-9c20-4564-8f38-3a90f188d651",
                "kind": "group",
                "name": "eShopOnWeb",
                "path": "eshoponweb"
            },
            "path": "eshoponweb",
            "path_with_namespace": "eshoponweb",
            "ssh_url_to_repo": "git@ssh.dev.azure.com:v3/gitlab-ps/eShopOnWeb/eShopOnWeb",
            "visibility": "private"
        }

        self.assertEqual(expected_formatted_project, formatted_project)

    @patch('congregate.migration.ado.api.repositories', new_callable=PropertyMock)
    @patch('congregate.migration.ado.base.AzureDevOpsWrapper.add_team_members')
    def test_format_group(self, mock_get_all_repositories, mock_add_team_members):
        mock_users = [
                {
                    "email": "gitlab-ps@outlook.com",
                    "id": "aad.NzE0YzVlNTItMmU1OC03ODgwLWEzMGQtMmZiYjE2ODdjZTk1",
                    "name": "GitLab PS",
                    "state": "active",
                    "username": "gitlab.ps"
                },
                {
                    "email": "john.doe@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.ZTlkMzM1NjgtZTZmMi03ZGVhLWI4ZmQtMzA4MzlmYjA2ODhm",
                    "name": "John Doe",
                    "state": "active",
                    "username": "john.doe"
                },
                {
                    "email": "paul.van.windmill@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.OTcwYTMwODktNTZjMC03ZmRiLWI1MDItYzIwZWVjM2Y1ZTM4",
                    "name": "Paul van Windmill",
                    "state": "active",
                    "username": "paul.van.windmill"
                },
                {
                    "email": "adam.bijman@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.NmEwOTg0ZWItYjI4Yy03YjVjLWJjZWItZTMwOTU3ZWQ2YTg4",
                    "name": "Adam Bijman",
                    "state": "active",
                    "username": "adam.bijman"
                }
            ]
        mock_add_team_members.return_value = mock_users
        group = self.mock_groups.get_single_group()
        mock_get_all_repositories.return_value = self.mock_repositories.get_all_repositories()
        self.api.add_project_repos = Mock(return_value=['8630e352-f5b2-4abc-a25c-00a931f0cda2', '9c766a24-385b-4931-afe4-245ad2e915aa'])
        formatted_group = self.api.format_group(group, mongo=None)

        expected_formatted_group = {
            "name": "MyShuttle",
            "id": "ac4f77cb-966f-49ae-b942-13471223719e",
            "path": "myshuttle",
            "full_path": "myshuttle",
            "visibility": "private",
            "description": "Generated by Azure DevOps Demo Generator",
            "members": [
                {
                    "email": "gitlab-ps@outlook.com",
                    "id": "aad.NzE0YzVlNTItMmU1OC03ODgwLWEzMGQtMmZiYjE2ODdjZTk1",
                    "name": "GitLab PS",
                    "state": "active",
                    "username": "gitlab.ps"
                },
                {
                    "email": "john.doe@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.ZTlkMzM1NjgtZTZmMi03ZGVhLWI4ZmQtMzA4MzlmYjA2ODhm",
                    "name": "John Doe",
                    "state": "active",
                    "username": "john.doe"
                },
                {
                    "email": "paul.van.windmill@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.OTcwYTMwODktNTZjMC03ZmRiLWI1MDItYzIwZWVjM2Y1ZTM4",
                    "name": "Paul van Windmill",
                    "state": "active",
                    "username": "paul.van.windmill"
                },
                {
                    "email": "adam.bijman@gitlabpsoutlook.onmicrosoft.com",
                    "id": "aad.NmEwOTg0ZWItYjI4Yy03YjVjLWJjZWItZTMwOTU3ZWQ2YTg4",
                    "name": "Adam Bijman",
                    "state": "active",
                    "username": "adam.bijman"
                }
            ],
            "projects": [
                '8630e352-f5b2-4abc-a25c-00a931f0cda2',
                '9c766a24-385b-4931-afe4-245ad2e915aa'
            ]
        }
        self.assertEqual(sorted(expected_formatted_group['projects']), sorted(formatted_group['projects']))

    def test_format_user(self):

        users = self.mock_users.get_all_users()
        user = users[0]
        formatted_user = self.api.format_user(user)
        expected_formatted_user = {
            "email": "john.doe@gitlabpsoutlook.onmicrosoft.com",
            "id": "aad.ZTlkMzM1NjgtZTZmMi03ZGVhLWI4ZmQtMzA4MzlmYjA2ODhm",
            "name": "John Doe",
            "state": "active",
            "username": "john.doe"
        }
        self.assertEqual(expected_formatted_user, formatted_user)

    def test_create_valid_username_basic(self):
        users = self.mock_users.get_all_users()
        user_display_name = users[0]["displayName"]
        expected_username = "john.doe"
        self.assertEqual(self.api.create_valid_username(user_display_name), expected_username)

    def test_create_valid_username_with_leading_trailing_dots(self):
        user = " ..john v doe.. "
        expected_username = "john.v.doe"
        self.assertEqual(self.api.create_valid_username(user), expected_username)
