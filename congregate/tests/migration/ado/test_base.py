import unittest
from unittest.mock import Mock
from pytest import mark

from congregate.migration.ado.api.base import AzureDevOpsApiWrapper
from congregate.migration.ado.api.projects import ProjectsApi
from congregate.migration.ado.api.repositories import RepositoriesApi

from congregate.tests.mockapi.ado.projects import MockProjectsApi
from congregate.tests.mockapi.ado.groups import MockGroupsApi
from congregate.tests.mockapi.ado.repositories import MockRepositoriesApi

@mark.unit_test
class BaseTests(unittest.TestCase):

    def setUp(self):
        self.mock_projects = MockProjectsApi()
        self.mock_groups = MockGroupsApi()
        self.mock_repositories = MockRepositoriesApi()
        self.api = AzureDevOpsApiWrapper()
        self.repositories_api = RepositoriesApi()
        self.api.slugify = Mock(side_effect=lambda x: x.lower().replace(' ', '-'))

    def test_slugify(self):
        self.assertEqual(self.api.slugify("Yet Another Repo"), "yet-another-repo")

    def test_format_project(self):
        
        # Test the formatting of project object based on project's mockAPI and repository's mockAPI

        project = self.mock_projects.get_single_project()
        repository = self.mock_repositories.get_single_repository()
        formatted_project = self.api.format_project(project, repository, 1, mongo=None)
        
        expected_formatted_project = {
            "name": "Azure Bicep Workshop",
            "id": "b2071745-4b0b-4cde-a177-9422f7cbd811",
            "path": "azure-bicep-workshop",
            "path_with_namespace": "azure-bicep-workshop",
            "visibility": "private",
            "description": "",
            "members": [],
            "projects": [],
            "http_url_to_repo": "https://gitlab-ps@dev.azure.com/gitlab-ps/Azure%20Bicep%20Workshop/_git/Azure%20Bicep%20Workshop",
            "ssh_url_to_repo": "git@ssh.dev.azure.com:v3/gitlab-ps/Azure%20Bicep%20Workshop/Azure%20Bicep%20Workshop"
        }
        
        self.assertEqual(expected_formatted_project, formatted_project)

    def test_format_group(self):

        # Test the formatting of group object based on group's mockAPI
        
        group = self.mock_groups.get_single_group()
        formatted_group = self.api.format_group(group, mongo=None)

        expected_formatted_group = {
            "name": "MyShuttle",
            "id": "ac4f77cb-966f-49ae-b942-13471223719e",
            "path": "myshuttle",
            "path_with_namespace": "myshuttle",
            "visibility": "private",
            "description": "Generated by Azure DevOps Demo Generator",
            "members": [],
            "projects": []
        }

        self.assertEqual(expected_formatted_group, formatted_group)
